{"file":"file-drop2.js","mappings":";;AAAA,MAAM,WAAW,GAAG,4RAA4R;;MCOnS,QAAQ;;;;;;;IAQnB,IAAY,UAAU;QACpB,OAAO,QAAQ,CAAC,aAAa,CAAmB,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC,CAAA;KAChE;IAGD,cAAc,CAAC,MAAM;QACnB,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAA;KACxB;IAGD,SAAS,CAAC,KAAK;QACb,KAAK,CAAC,cAAc,EAAE,CAAA;QACtB,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,CAAA;KACnC;IAGD,WAAW,CAAC,MAAM;QAChB,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,WAAW,CAAC,CAAA;KACtC;IAGD,IAAI,CAAC,KAAK;QACR,KAAK,CAAC,cAAc,EAAE,CAAA;QACtB,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,WAAW,CAAC,CAAA;QACrC,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,KAAK,CAAC,YAAY,CAAC,KAAK,CAAA;QAChD,MAAM,WAAW,GAAG,IAAI,KAAK,CAAC,QAAQ,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAA;QAC1D,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,WAAW,CAAC,CAAA;KAC3C;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["src/components/file-drop/file-drop.css?tag=file-drop","src/components/file-drop/file-drop.tsx"],"sourcesContent":["file-drop {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  box-sizing: border-box;\n  min-height: 60px;\n  outline-offset: -10px;\n  padding: 20px;\n  background: rgba(255, 255, 255, 0.25);\n  text-align: center;\n  transition: all 0.15s ease 0s;\n  outline: rgba(0, 0, 0, 0.25) dashed 2px;\n}\n","import { Component, Element, Prop, Listen } from '@stencil/core'\n\n@Component({\n  tag: 'file-drop',\n  styleUrl: 'file-drop.css',\n  shadow: false,\n})\nexport class FileDrop {\n  @Element() el: HTMLElement\n\n  /**\n   * The id of the an input[type=file] to assign dropped files to\n   */\n  @Prop({ reflect: true, mutable: true, attribute: \"for\" }) for: string\n\n  private get fileTarget(): HTMLInputElement {\n    return document.querySelector<HTMLInputElement>(`#${this.for}`)\n  }\n\n  @Listen(\"click\")\n  openFilePicker(_event) {\n    this.fileTarget.click()\n  }\n\n  @Listen(\"dragover\", { passive: false })\n  highlight(event) {\n    event.preventDefault()\n    this.el.classList.add(\"-dragover\")\n  }\n\n  @Listen(\"dragleave\", { passive: false })\n  unhighlight(_event) {\n    this.el.classList.remove(\"-dragover\")\n  }\n\n  @Listen(\"drop\", { passive: false })\n  drop(event) {\n    event.preventDefault()\n    this.el.classList.remove(\"-dragover\")\n    this.fileTarget.files = event.dataTransfer.files\n    const changeEvent = new Event(\"change\", { bubbles: true })\n    this.fileTarget.dispatchEvent(changeEvent)\n  }\n}\n"],"version":3}