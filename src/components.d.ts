/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface AttachmentFile {
        "accepts": string;
        "filename": string;
        "filetype": string;
        "max": number;
        "name": string;
        /**
          * @default 100
         */
        "percent": number;
        /**
          * @default true
         */
        "preview": boolean;
        "size": number;
        "src": string;
        /**
          * @default "complete"
         */
        "state": string;
        "url": string;
        "validationMessage": string;
        /**
          * @default ""
         */
        "value": string;
    }
    interface AttachmentPreview {
        "filetype": string;
        "src": string;
    }
    interface InputAttachment {
        "accepts": string;
        "directupload": string;
        "max": number;
        /**
          * @default false
         */
        "multiple": boolean;
        "name": string;
        /**
          * @default true
         */
        "preview": boolean;
        /**
          * @default false
         */
        "required": boolean;
    }
}
export interface AttachmentFileCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAttachmentFileElement;
}
declare global {
    interface HTMLAttachmentFileElementEventMap {
        "attachment-file:remove": any;
    }
    interface HTMLAttachmentFileElement extends Components.AttachmentFile, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAttachmentFileElementEventMap>(type: K, listener: (this: HTMLAttachmentFileElement, ev: AttachmentFileCustomEvent<HTMLAttachmentFileElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAttachmentFileElementEventMap>(type: K, listener: (this: HTMLAttachmentFileElement, ev: AttachmentFileCustomEvent<HTMLAttachmentFileElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAttachmentFileElement: {
        prototype: HTMLAttachmentFileElement;
        new (): HTMLAttachmentFileElement;
    };
    interface HTMLAttachmentPreviewElement extends Components.AttachmentPreview, HTMLStencilElement {
    }
    var HTMLAttachmentPreviewElement: {
        prototype: HTMLAttachmentPreviewElement;
        new (): HTMLAttachmentPreviewElement;
    };
    interface HTMLInputAttachmentElement extends Components.InputAttachment, HTMLStencilElement {
    }
    var HTMLInputAttachmentElement: {
        prototype: HTMLInputAttachmentElement;
        new (): HTMLInputAttachmentElement;
    };
    interface HTMLElementTagNameMap {
        "attachment-file": HTMLAttachmentFileElement;
        "attachment-preview": HTMLAttachmentPreviewElement;
        "input-attachment": HTMLInputAttachmentElement;
    }
}
declare namespace LocalJSX {
    interface AttachmentFile {
        "accepts"?: string;
        "filename"?: string;
        "filetype"?: string;
        "max"?: number;
        "name"?: string;
        "onAttachment-file:remove"?: (event: AttachmentFileCustomEvent<any>) => void;
        /**
          * @default 100
         */
        "percent"?: number;
        /**
          * @default true
         */
        "preview"?: boolean;
        "size"?: number;
        "src"?: string;
        /**
          * @default "complete"
         */
        "state"?: string;
        "url"?: string;
        "validationMessage"?: string;
        /**
          * @default ""
         */
        "value"?: string;
    }
    interface AttachmentPreview {
        "filetype"?: string;
        "src"?: string;
    }
    interface InputAttachment {
        "accepts"?: string;
        "directupload"?: string;
        "max"?: number;
        /**
          * @default false
         */
        "multiple"?: boolean;
        "name"?: string;
        /**
          * @default true
         */
        "preview"?: boolean;
        /**
          * @default false
         */
        "required"?: boolean;
    }
    interface IntrinsicElements {
        "attachment-file": AttachmentFile;
        "attachment-preview": AttachmentPreview;
        "input-attachment": InputAttachment;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "attachment-file": LocalJSX.AttachmentFile & JSXBase.HTMLAttributes<HTMLAttachmentFileElement>;
            "attachment-preview": LocalJSX.AttachmentPreview & JSXBase.HTMLAttributes<HTMLAttachmentPreviewElement>;
            "input-attachment": LocalJSX.InputAttachment & JSXBase.HTMLAttributes<HTMLInputAttachmentElement>;
        }
    }
}
